'use strict';

var view = require('@codemirror/view');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// Helper module for styling options
const generalContent = {
    fontSize: '14px',
    fontFamily: 'JetBrains Mono, Consolas, monospace',
    lineHeight: '1.6',
};
const generalCursor = {
    borderLeftWidth: '2px',
};
const generalDiff = {
    insertedTextDecoration: 'none',
    deletedTextDecoration: 'line-through',
    insertedLinePadding: '1px 3px',
    borderRadious: '3px'};
const generalGutter = {
    border: 'none',
    paddingRight: '8px',
    fontSize: '0.9em',
    fontWeight: '500',
};
const generalPanel = {
    border: 'none',
    borderRadius: '4px',
    padding: '2px 10px',
};
const generalLine = {
    borderRadius: '2px',
};
const generalMatching = {
    borderRadius: '2px',
};
const generalPlaceholder = {
    borderRadius: '4px',
    padding: '0 5px',
    margin: '0 2px',
};
const generalScroller = {
    width: '12px',
    height: '12px',
    borderRadius: '6px',
};
const generalSearchField = {
    borderRadius: '4px',
    padding: '2px 6px',
};
const generalTooltip = {
    borderRadius: '4px',
    borderRadiusSelected: '3px',
    lineHeight: '1.3',
    padding: '4px 8px',
    paddingRight: '8px',
};
/**
 * Function to apply merge revert styles for a theme
 * @param styles Styles for the merge revert buttons
 * @param styles.backgroundColor Background color of the revert area
 * @param styles.borderColor Border color of the revert area
 * @param styles.buttonColor Color of the revert buttons
 * @param styles.buttonHoverColor Hover color of the revert buttons
 */
function applyMergeRevertStyles(styles) {
    // Create a stylesheet
    const styleEl = document.createElement('style');
    styleEl.id = 'cm-merge-revert-styles';
    // Define CSS with the theme-specific values
    styleEl.textContent = `
    .cm-merge-revert {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding: 4px;
      background-color: ${styles.backgroundColor};
      border-left: 1px solid ${styles.borderColor};
      border-right: 1px solid ${styles.borderColor};
      width: 32px;
    }
    
    .cm-merge-revert button {
      width: 100%;
      height: auto;
      background-color: transparent;
      border: none;
      color: ${styles.buttonColor};
      cursor: pointer;
      margin: 0 auto;
      font-size: 20px;
    }
    
    .cm-merge-revert button:hover {
      background-color: ${styles.buttonHoverColor};
    }
  `;
    // Remove any existing merge styles
    const existingStyle = document.getElementById('cm-merge-revert-styles');
    if (existingStyle)
        existingStyle.remove();
    // Add the new styles
    document.head.appendChild(styleEl);
}

/**
 * Enhanced Volcano theme color definitions
 * ---------------------------------------------
 * Colors organized by function with visual color blocks
 */
// Base colors
const base00 = '#390000', // Background
base01 = '#F8F8F8', // Foreground
base02 = '#750000', // Selection background
base03 = '#e7c0c0', // Comments, invisibles
base04 = '#970000', // Cursor
base05 = '#f12727', // Default foreground
base06 = '#580000', // Dark background for panels
base07 = '#4a0000', // Darker background (gutter)
// Accent colors
base08 = '#ec0d1e', // Errors, invalid
base09 = '#aa5507', // Numbers, constants
base0A = '#fec758', // Classes, attributes
base0B = '#9df39f', // Success
base0C = '#7df3f7', // Functions, parameters
base0D = '#7dcaf7', // Variables
base0E = '#c27df7', // Keywords, operators
base0F = '#f77dca'; // Special characters
// UI specific colors
const invalid = '#ffffff', darkBackground = base06, highlightBackground = '#ff000035', // Line highlight with transparency
background = base00, tooltipBackground = '#680000', selection = '#75000080', // Selection background with transparency
selectionMatch = '#7500009a', // Selection match with transparency
cursor = base04, // Cursor color
activeBracketBg = '#ff550040', // Active bracket background with transparency
activeBracketBorder = base08, // Active bracket border
diagnosticWarning = base09, // Warning color
linkColor = base0C, // Link color
visitedLinkColor = base0E; // Visited link color
// Diff/merge specific colors
const addedBackground = '#2a4a0080', // Dark green with transparency for insertions
removedBackground = '#750000a0', // Dark red with transparency for deletions
addedText = '#9df39f', // Volcano green for added text
removedText = '#ec0d1e'; // Volcano red for removed text
/**
 * Enhanced editor theme styles for Volcano
 */
const volcanoTheme = view.EditorView.theme({
    // Base editor styles
    '&': {
        color: base01,
        backgroundColor: background,
        fontSize: generalContent.fontSize,
        fontFamily: generalContent.fontFamily,
    },
    // Content and cursor
    '.cm-content': {
        caretColor: cursor,
        lineHeight: generalContent.lineHeight,
    },
    '.cm-cursor, .cm-dropCursor': {
        borderLeftColor: cursor,
        borderLeftWidth: generalCursor.borderLeftWidth,
    },
    '.cm-fat-cursor': {
        backgroundColor: `${cursor}99`,
        color: background,
    },
    // Selection
    '&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {
        backgroundColor: selection,
    },
    // Make sure selection appears above active line
    '.cm-selectionLayer': {
        zIndex: 100,
    },
    // Search functionality
    '.cm-searchMatch': {
        backgroundColor: '#75000080',
        outline: `1px solid ${base08}`,
        color: base01,
        borderRadius: generalSearchField.borderRadius,
    },
    '.cm-searchMatch.cm-searchMatch-selected': {
        backgroundColor: base08,
        color: background,
        padding: generalSearchField.padding,
        '& span': {
            color: base01,
        },
    },
    '.cm-search.cm-panel.cm-textfield': {
        color: base01,
        borderRadius: generalSearchField.borderRadius,
        padding: generalSearchField.padding,
    },
    // Panels
    '.cm-panels': {
        backgroundColor: darkBackground,
        color: base01,
        borderRadius: '4px',
    },
    '.cm-panels.cm-panels-top': {
        borderBottom: `2px solid ${base00}`,
    },
    '.cm-panels.cm-panels-bottom': {
        borderTop: `2px solid ${base00}`,
    },
    '.cm-panel button': {
        backgroundColor: base07,
        color: base01,
        border: generalPanel.border,
        borderRadius: generalPanel.borderRadius,
        padding: generalPanel.padding,
    },
    '.cm-panel button:hover': {
        backgroundColor: base02,
        boxShadow: '0 0 4px #ff550080',
    },
    // Line highlighting
    '.cm-activeLine': {
        backgroundColor: highlightBackground,
        borderRadius: generalLine.borderRadius,
        zIndex: 1,
    },
    // Gutters
    '.cm-gutters': {
        backgroundColor: base07,
        color: base03,
        border: generalGutter.border,
        borderRight: `1px solid ${base06}`,
        paddingRight: generalGutter.paddingRight,
    },
    '.cm-activeLineGutter': {
        backgroundColor: '#550000',
        color: base01,
        fontWeight: generalGutter.fontWeight,
    },
    '.cm-lineNumbers': {
        fontSize: generalGutter.fontSize,
    },
    '.cm-foldGutter': {
        fontSize: generalGutter.fontSize,
    },
    '.cm-foldGutter .cm-gutterElement': {
        color: base03,
        cursor: 'pointer',
    },
    '.cm-foldGutter .cm-gutterElement:hover': {
        color: base01,
    },
    // Diff/Merge View Styles
    // Inserted/Added Content
    '.cm-insertedLine': {
        textDecoration: generalDiff.insertedTextDecoration,
        backgroundColor: addedBackground,
        color: addedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
    },
    'ins.cm-insertedLine, ins.cm-insertedLine:not(:has(.cm-changedText))': {
        textDecoration: generalDiff.insertedTextDecoration,
        backgroundColor: `${addedBackground} !important`,
        color: addedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
        border: `1px solid ${addedText}40`,
    },
    'ins.cm-insertedLine .cm-changedText': {
        background: 'transparent !important',
    },
    // Deleted/Removed Content
    '.cm-deletedLine': {
        textDecoration: generalDiff.deletedTextDecoration,
        backgroundColor: removedBackground,
        color: removedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
    },
    'del.cm-deletedLine, del, del:not(:has(.cm-deletedText))': {
        textDecoration: generalDiff.deletedTextDecoration,
        backgroundColor: `${removedBackground} !important`,
        color: removedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
        border: `1px solid ${removedText}40`,
    },
    'del .cm-deletedText, del .cm-changedText': {
        background: 'transparent !important',
    },
    // Tooltips and autocomplete
    '.cm-tooltip': {
        backgroundColor: tooltipBackground,
        border: `1px solid ${base08}60`,
        borderRadius: generalTooltip.borderRadius,
        padding: generalTooltip.padding,
        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.4)',
    },
    '.cm-tooltip-autocomplete': {
        '& > ul': {
            backgroundColor: tooltipBackground,
            border: 'none',
            maxHeight: '300px',
        },
        '& > ul > li': {
            padding: generalTooltip.padding,
            lineHeight: generalTooltip.lineHeight,
        },
        '& > ul > li[aria-selected]': {
            backgroundColor: base02,
            color: base01,
            borderRadius: generalTooltip.borderRadiusSelected,
        },
        '& > ul > li > span.cm-completionIcon': {
            color: base03,
            paddingRight: generalTooltip.paddingRight,
        },
        '& > ul > li > span.cm-completionDetail': {
            color: base03,
            fontStyle: 'italic',
        },
    },
    '.cm-tooltip .cm-tooltip-arrow:before': {
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent',
    },
    '.cm-tooltip .cm-tooltip-arrow:after': {
        borderTopColor: tooltipBackground,
        borderBottomColor: tooltipBackground,
    },
    // Diagnostics styling
    '.cm-diagnostic': {
        '&-error': {
            borderLeft: `3px solid ${base08}`,
        },
        '&-warning': {
            borderLeft: `3px solid ${diagnosticWarning}`,
        },
        '&-info': {
            borderLeft: `3px solid ${linkColor}`,
        },
    },
    '.cm-lintPoint-error': {
        borderBottom: `2px wavy ${base08}`,
    },
    '.cm-lintPoint-warning': {
        borderBottom: `2px wavy ${diagnosticWarning}`,
    },
    // Matching brackets
    '.cm-matchingBracket': {
        backgroundColor: activeBracketBg,
        outline: `1px solid ${activeBracketBorder}`,
        borderRadius: generalMatching.borderRadius,
    },
    '.cm-nonmatchingBracket': {
        backgroundColor: `${base08}40`,
        outline: `1px solid ${invalid}`,
        borderRadius: generalMatching.borderRadius,
    },
    // Selection matches
    '.cm-selectionMatch': {
        backgroundColor: selectionMatch,
        outline: `1px solid ${base02}50`,
        borderRadius: generalMatching.borderRadius,
    },
    // Fold placeholder
    '.cm-foldPlaceholder': {
        backgroundColor: tooltipBackground,
        color: base03,
        border: `1px dotted ${base03}70`,
        borderRadius: generalPlaceholder.borderRadius,
        padding: generalPlaceholder.padding,
        margin: generalPlaceholder.margin,
    },
    // Focus outline
    '&.cm-focused': {
        outline: 'none',
        boxShadow: `0 0 0 2px ${background}, 0 0 0 3px ${base08}70`,
    },
    // Scrollbars
    '& .cm-scroller::-webkit-scrollbar': {
        width: generalScroller.width,
        height: generalScroller.height,
    },
    '& .cm-scroller::-webkit-scrollbar-track': {
        background: base07,
    },
    '& .cm-scroller::-webkit-scrollbar-thumb': {
        backgroundColor: base02,
        borderRadius: generalScroller.borderRadius,
        border: `3px solid ${base07}`,
    },
    '& .cm-scroller::-webkit-scrollbar-thumb:hover': {
        backgroundColor: base08,
    },
    // Ghost text
    '.cm-ghostText': {
        opacity: '0.5',
        color: base03,
    },
}, { dark: true });
/**
 * Enhanced syntax highlighting for Volcano theme
 */
const volcanoHighlightStyle = language.HighlightStyle.define([
    // Keywords and control flow
    { tag: highlight.tags.keyword, color: base05, fontWeight: 'bold' },
    { tag: highlight.tags.controlKeyword, color: base05, fontWeight: 'bold' },
    { tag: highlight.tags.moduleKeyword, color: base05, fontWeight: 'bold' },
    // Names and variables
    { tag: [highlight.tags.name, highlight.tags.deleted, highlight.tags.character, highlight.tags.macroName], color: base01 },
    { tag: [highlight.tags.variableName], color: base0A },
    { tag: [highlight.tags.propertyName], color: base0C, fontStyle: 'normal' },
    // Classes and types
    { tag: [highlight.tags.typeName], color: base0B },
    { tag: [highlight.tags.className], color: base0A, fontStyle: 'italic' },
    { tag: [highlight.tags.namespace], color: base0D, fontStyle: 'italic' },
    // Operators and punctuation
    { tag: [highlight.tags.operator, highlight.tags.operatorKeyword], color: base0E },
    { tag: [highlight.tags.bracket], color: base03 },
    { tag: [highlight.tags.brace], color: base03 },
    { tag: [highlight.tags.punctuation], color: base03 },
    // Functions and parameters
    { tag: [highlight.tags.function(highlight.tags.variableName)], color: base0C },
    { tag: [highlight.tags.labelName], color: base0C, fontStyle: 'italic' },
    { tag: [highlight.tags.definition(highlight.tags.function(highlight.tags.variableName))], color: base0C },
    { tag: [highlight.tags.definition(highlight.tags.variableName)], color: base0A },
    // Constants and literals
    { tag: highlight.tags.number, color: base09 },
    { tag: highlight.tags.changed, color: base09 },
    { tag: highlight.tags.annotation, color: invalid, fontStyle: 'italic' },
    { tag: highlight.tags.modifier, color: base09, fontStyle: 'italic' },
    { tag: highlight.tags.self, color: base09 },
    {
        tag: [highlight.tags.color, highlight.tags.constant(highlight.tags.name), highlight.tags.standard(highlight.tags.name)],
        color: base09,
    },
    { tag: [highlight.tags.atom, highlight.tags.bool, highlight.tags.special(highlight.tags.variableName)], color: base09 },
    // Strings and regex
    { tag: [highlight.tags.processingInstruction, highlight.tags.inserted], color: base0B },
    { tag: [highlight.tags.special(highlight.tags.string), highlight.tags.regexp], color: base0F },
    { tag: highlight.tags.string, color: base0A },
    // Punctuation and structure
    { tag: highlight.tags.definition(highlight.tags.typeName), color: base0B, fontWeight: 'bold' },
    { tag: [highlight.tags.definition(highlight.tags.name), highlight.tags.separator], color: base01 },
    // Comments and documentation
    { tag: highlight.tags.meta, color: base03 },
    { tag: highlight.tags.comment, fontStyle: 'italic', color: base03 },
    { tag: highlight.tags.docComment, fontStyle: 'italic', color: base03 },
    // HTML/XML elements
    { tag: [highlight.tags.tagName], color: base08 },
    { tag: [highlight.tags.attributeName], color: base0A },
    // Markdown and text formatting
    { tag: [highlight.tags.heading], fontWeight: 'bold', color: base09 },
    { tag: highlight.tags.heading1, color: base08, fontWeight: 'bold' },
    { tag: highlight.tags.heading2, color: base09 },
    { tag: highlight.tags.heading3, color: base0A },
    { tag: highlight.tags.heading4, color: base0B },
    { tag: highlight.tags.heading5, color: base0C },
    { tag: highlight.tags.heading6, color: base0D },
    { tag: [highlight.tags.strong], fontWeight: 'bold', color: base01 },
    { tag: [highlight.tags.emphasis], fontStyle: 'italic', color: base0A },
    // Links and URLs
    {
        tag: [highlight.tags.link],
        color: visitedLinkColor,
        fontWeight: '500',
        textDecoration: 'underline',
        textUnderlinePosition: 'under',
    },
    {
        tag: [highlight.tags.url],
        color: linkColor,
        textDecoration: 'underline',
        textUnderlineOffset: '2px',
    },
    // Special states
    {
        tag: [highlight.tags.invalid],
        color: base01,
        textDecoration: 'underline wavy',
        borderBottom: `1px wavy ${invalid}`,
    },
    { tag: [highlight.tags.strikethrough], color: invalid, textDecoration: 'line-through' },
    // Enhanced syntax highlighting
    { tag: highlight.tags.constant(highlight.tags.name), color: base09 },
    { tag: highlight.tags.deleted, color: base08 },
    { tag: highlight.tags.squareBracket, color: base03 },
    { tag: highlight.tags.angleBracket, color: base03 },
    // Additional specific styles
    { tag: highlight.tags.monospace, color: base01 },
    { tag: [highlight.tags.contentSeparator], color: base0D },
    { tag: highlight.tags.quote, color: base03 },
]);
/**
 * Combined Volcano theme extension
 */
const volcano = [
    volcanoTheme,
    language.syntaxHighlighting(volcanoHighlightStyle),
];
/**
 * Volcano merge revert styles configuration
 */
const volcanoMergeStyles = {
    backgroundColor: tooltipBackground,
    borderColor: base07,
    buttonColor: base01,
    buttonHoverColor: base08,
};

exports.applyMergeRevertStyles = applyMergeRevertStyles;
exports.volcano = volcano;
exports.volcanoMergeStyles = volcanoMergeStyles;
