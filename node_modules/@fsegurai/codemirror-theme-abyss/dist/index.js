import { EditorView } from '@codemirror/view';
import { HighlightStyle, syntaxHighlighting } from '@codemirror/language';
import { tags } from '@lezer/highlight';

// Helper module for styling options
const generalContent = {
    fontSize: '14px',
    fontFamily: 'JetBrains Mono, Consolas, monospace',
    lineHeight: '1.6',
};
const generalCursor = {
    borderLeftWidth: '2px',
};
const generalDiff = {
    insertedTextDecoration: 'none',
    deletedTextDecoration: 'line-through',
    insertedLinePadding: '1px 3px',
    borderRadious: '3px'};
const generalGutter = {
    border: 'none',
    paddingRight: '8px',
    fontSize: '0.9em',
    fontWeight: '500',
};
const generalPanel = {
    border: 'none',
    borderRadius: '4px',
    padding: '2px 10px',
};
const generalLine = {
    borderRadius: '2px',
};
const generalMatching = {
    borderRadius: '2px',
};
const generalPlaceholder = {
    borderRadius: '4px',
    padding: '0 5px',
    margin: '0 2px',
};
const generalScroller = {
    width: '12px',
    height: '12px',
    borderRadius: '6px',
};
const generalSearchField = {
    borderRadius: '4px',
    padding: '2px 6px',
};
const generalTooltip = {
    borderRadius: '4px',
    borderRadiusSelected: '3px',
    lineHeight: '1.3',
    padding: '4px 8px',
    paddingRight: '8px',
};
/**
 * Function to apply merge revert styles for a theme
 * @param styles Styles for the merge revert buttons
 * @param styles.backgroundColor Background color of the revert area
 * @param styles.borderColor Border color of the revert area
 * @param styles.buttonColor Color of the revert buttons
 * @param styles.buttonHoverColor Hover color of the revert buttons
 */
function applyMergeRevertStyles(styles) {
    // Create a stylesheet
    const styleEl = document.createElement('style');
    styleEl.id = 'cm-merge-revert-styles';
    // Define CSS with the theme-specific values
    styleEl.textContent = `
    .cm-merge-revert {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding: 4px;
      background-color: ${styles.backgroundColor};
      border-left: 1px solid ${styles.borderColor};
      border-right: 1px solid ${styles.borderColor};
      width: 32px;
    }
    
    .cm-merge-revert button {
      width: 100%;
      height: auto;
      background-color: transparent;
      border: none;
      color: ${styles.buttonColor};
      cursor: pointer;
      margin: 0 auto;
      font-size: 20px;
    }
    
    .cm-merge-revert button:hover {
      background-color: ${styles.buttonHoverColor};
    }
  `;
    // Remove any existing merge styles
    const existingStyle = document.getElementById('cm-merge-revert-styles');
    if (existingStyle)
        existingStyle.remove();
    // Add the new styles
    document.head.appendChild(styleEl);
}

// Base colors - Ocean depths
const base00 = '#000c18', // - Background (deep ocean blue)
base01 = '#a3c9e9', // - Foreground (lighter blue for enhanced readability)
base02 = '#0e6299', // - Selection (more vibrant blue for better visibility)
base03 = '#b4a2f7', // - Gutter background (darker for contrast)
base04 = '#e6d4a3', // - Cursor (warmer gold for better visibility)
base05 = '#0066ff20', // - Active line (subtle blue tint)
base06 = '#ffffff', // - Pure white for maximum contrast
base07 = '#47c1ff', // - Keywords (brighter cyan blue)
base08 = '#5caeff', // - Variables (softer azure blue)
base09 = '#7599c2', // - Comments (brighter blue-gray)
base0A = '#4ce660', // - Strings (kept vibrant green for contrast)
base0B = '#c3a2f7', // - Functions (softer purple)
base0C = '#ff9eea', // - Constants (softer pink)
base0D = '#ffd47b', // - Classes (warmer gold)
base0E = '#8eb8ff', // - Headings (brighter sky blue)
base0F = '#59d6ff', // - Tags (brighter cyan)
base10 = '#ff50c8', // - Links (brighter magenta)
base11 = '#66ecd4', // - URLs (brighter teal)
// UI elements
invalid = '#ff5370', darkBackground = '#0a1422', // Darker background for better contrast
highlightBackground = '#0055ff15', tooltipBackground = '#05101d', // Darker tooltip for better contrast
cursor = base04, selection = base02, activeBracketBg = '#0a5999b0', activeBracketBorder = base0F, 
// Diff/merge specific colors
addedBackground = '#0e4e1d50', // Dark green with transparency for insertions
removedBackground = '#78112240', // Dark red with transparency for deletions
addedText = '#4ce660', // Bright green for added text (matching string color)
removedText = '#ff6b7d'; // Bright red for removed text
/**
 * Enhanced editor theme styles for Abyss
 */
const abyssTheme = /*@__PURE__*/EditorView.theme({
    // Base editor styles
    '&': {
        color: base01,
        backgroundColor: base00,
        fontSize: generalContent.fontSize,
        fontFamily: generalContent.fontFamily,
    },
    // Content and cursor
    '.cm-content': {
        caretColor: cursor,
        lineHeight: generalContent.lineHeight,
    },
    '.cm-cursor, .cm-dropCursor': {
        borderLeftColor: cursor,
        borderLeftWidth: generalCursor.borderLeftWidth,
    },
    '.cm-fat-cursor': {
        backgroundColor: `${cursor}99`,
        color: base00,
    },
    // Selection
    '&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': {
        backgroundColor: selection,
    },
    // Search functionality
    '.cm-searchMatch': {
        backgroundColor: '#155ab380',
        outline: `1px solid ${base08}`,
        borderRadius: generalSearchField.borderRadius,
        '& span': {
            color: base06,
        },
    },
    '.cm-searchMatch.cm-searchMatch-selected': {
        backgroundColor: '#2a6ac080',
        color: base06,
        padding: generalSearchField.padding,
        '& span': {
            color: base06,
        },
    },
    '.cm-search.cm-panel.cm-textfield': {
        color: base01,
        borderRadius: generalSearchField.borderRadius,
        padding: generalSearchField.padding,
    },
    // Panels
    '.cm-panels': {
        backgroundColor: darkBackground,
        color: base01,
    },
    '.cm-panels.cm-panels-top': {
        borderBottom: '2px solid #0a3555',
    },
    '.cm-panels.cm-panels-bottom': {
        borderTop: '2px solid #0a3555',
    },
    '.cm-panel button': {
        backgroundColor: darkBackground,
        color: base01,
        border: generalPanel.border,
        borderRadius: generalPanel.borderRadius,
        padding: generalPanel.padding,
    },
    '.cm-panel button:hover': {
        backgroundColor: '#0a3555',
    },
    // Line highlighting
    '.cm-activeLine': {
        backgroundColor: highlightBackground,
        borderRadius: generalLine.borderRadius,
    },
    // Gutters
    '.cm-gutters': {
        backgroundColor: darkBackground,
        color: '#5f7e97',
        border: generalGutter.border,
        paddingRight: generalGutter.paddingRight,
    },
    '.cm-activeLineGutter': {
        backgroundColor: highlightBackground,
        color: base01,
        fontWeight: generalGutter.fontWeight,
    },
    '.cm-lineNumbers': {
        fontSize: generalGutter.fontSize,
    },
    '.cm-foldGutter': {
        fontSize: generalGutter.fontSize,
    },
    '.cm-foldGutter .cm-gutterElement': {
        color: '#5f7e97',
        cursor: 'pointer',
    },
    '.cm-foldGutter .cm-gutterElement:hover': {
        color: base01,
    },
    // Diff/Merge View Styles
    // Inserted/Added Content
    '.cm-insertedLine': {
        textDecoration: generalDiff.insertedTextDecoration,
        backgroundColor: addedBackground,
        color: addedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
    },
    'ins.cm-insertedLine, ins.cm-insertedLine:not(:has(.cm-changedText))': {
        textDecoration: generalDiff.insertedTextDecoration,
        backgroundColor: `${addedBackground} !important`,
        color: addedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
        border: `1px solid ${addedText}40`,
    },
    'ins.cm-insertedLine .cm-changedText': {
        background: 'transparent !important',
    },
    // Deleted/Removed Content
    '.cm-deletedLine': {
        textDecoration: generalDiff.deletedTextDecoration,
        backgroundColor: removedBackground,
        color: removedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
    },
    'del.cm-deletedLine, del, del:not(:has(.cm-deletedText))': {
        textDecoration: generalDiff.deletedTextDecoration,
        backgroundColor: `${removedBackground} !important`,
        color: removedText,
        padding: generalDiff.insertedLinePadding,
        borderRadius: generalDiff.borderRadious,
        border: `1px solid ${removedText}40`,
    },
    'del .cm-deletedText, del .cm-changedText': {
        background: 'transparent !important',
    },
    // Tooltips and autocomplete
    '.cm-tooltip': {
        backgroundColor: tooltipBackground,
        border: '1px solid #084671',
        borderRadius: generalTooltip.borderRadius,
        padding: generalTooltip.padding,
        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.5)',
    },
    '.cm-tooltip-autocomplete': {
        '& > ul > li': {
            padding: generalTooltip.padding,
            lineHeight: generalTooltip.lineHeight,
        },
        '& > ul > li[aria-selected]': {
            backgroundColor: '#084671',
            color: '#e0edff',
            borderRadius: generalTooltip.borderRadiusSelected,
        },
        '& > ul > li > span.cm-completionIcon': {
            color: '#5f7e97',
            paddingRight: generalTooltip.paddingRight,
        },
        '& > ul > li > span.cm-completionDetail': {
            color: '#5f7e97',
            fontStyle: 'italic',
        },
    },
    '.cm-tooltip .cm-tooltip-arrow:before': {
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent',
    },
    '.cm-tooltip .cm-tooltip-arrow:after': {
        borderTopColor: tooltipBackground,
        borderBottomColor: tooltipBackground,
    },
    // Diagnostics styling
    '.cm-diagnostic': {
        '&-error': {
            borderLeft: `3px solid ${invalid}`,
        },
        '&-warning': {
            borderLeft: `3px solid ${base0A}`,
        },
        '&-info': {
            borderLeft: `3px solid ${base0B}`,
        },
    },
    '.cm-lintPoint-error': {
        borderBottom: `2px wavy ${invalid}`,
    },
    '.cm-lintPoint-warning': {
        borderBottom: `2px wavy ${base0A}`,
    },
    // Matching brackets
    '.cm-matchingBracket': {
        backgroundColor: activeBracketBg,
        outline: `1px solid ${activeBracketBorder}`,
        borderRadius: generalMatching.borderRadius,
    },
    '.cm-nonmatchingBracket': {
        backgroundColor: '#780e1e80',
        outline: `1px solid ${invalid}`,
        borderRadius: generalMatching.borderRadius,
    },
    // Selection matches
    '.cm-selectionMatch': {
        backgroundColor: '#155ab340',
        outline: `1px solid ${base08}`,
        borderRadius: generalMatching.borderRadius,
    },
    // Fold placeholder
    '.cm-foldPlaceholder': {
        backgroundColor: 'transparent',
        color: '#5f7e97',
        fontStyle: 'italic',
        border: `1px dotted ${activeBracketBorder}`,
        borderRadius: generalPlaceholder.borderRadius,
        padding: generalPlaceholder.padding,
        margin: generalPlaceholder.margin,
    },
    // Focus outline
    '&.cm-focused': {
        outline: 'none',
        boxShadow: `0 0 0 2px ${base05}, 0 0 0 4px ${base00}`,
    },
    // Scrollbars
    '& .cm-scroller::-webkit-scrollbar': {
        width: generalScroller.width,
        height: generalScroller.height,
    },
    '& .cm-scroller::-webkit-scrollbar-track': {
        background: darkBackground,
    },
    '& .cm-scroller::-webkit-scrollbar-thumb': {
        backgroundColor: '#5f7e97',
        borderRadius: generalScroller.borderRadius,
        border: `3px solid ${darkBackground}`,
    },
    '& .cm-scroller::-webkit-scrollbar-thumb:hover': {
        backgroundColor: '#4cc9ff',
    },
    // Ghost text
    '.cm-ghostText': {
        opacity: '0.5',
        color: '#ffffff',
    },
}, { dark: true });
/**
 * Enhanced syntax highlighting for the Abyss theme
 */
const abyssHighlightStyle = /*@__PURE__*/HighlightStyle.define([
    // Keywords and control flow
    { tag: tags.keyword, color: base07, fontWeight: 'bold' },
    { tag: tags.controlKeyword, color: base0F, fontWeight: 'bold' },
    { tag: tags.moduleKeyword, color: base07, fontWeight: 'bold' },
    // Names and variables
    { tag: [tags.name, tags.deleted, tags.character, tags.macroName], color: base08 },
    { tag: [tags.variableName], color: '#7ab2ff' },
    { tag: [tags.propertyName], color: base0E, fontStyle: 'normal' },
    // Classes and types
    { tag: [tags.typeName], color: base03 },
    { tag: [tags.className], color: base0D, fontStyle: 'italic' },
    { tag: [tags.namespace], color: base0C, fontStyle: 'italic' },
    // Operators and punctuation - clearer blues
    { tag: [tags.operator, tags.operatorKeyword], color: base0E },
    { tag: [tags.bracket], color: base01 },
    { tag: [tags.brace], color: base01 },
    { tag: [tags.punctuation], color: base01 },
    // Functions and parameters
    { tag: [/*@__PURE__*/tags.function(tags.variableName), tags.labelName], color: base0B },
    { tag: [/*@__PURE__*/tags.definition(tags.variableName)], color: base0B },
    // Constants and literals
    { tag: tags.number, color: base0C },
    { tag: tags.changed, color: base0C },
    { tag: tags.annotation, color: base0C, fontStyle: 'italic' },
    { tag: tags.modifier, color: base0C, fontStyle: 'italic' },
    { tag: tags.self, color: base0C },
    { tag: [tags.color, /*@__PURE__*/tags.constant(tags.name), /*@__PURE__*/tags.standard(tags.name)], color: base0C },
    { tag: [tags.atom, tags.bool, /*@__PURE__*/tags.special(tags.variableName)], color: '#ff9e64' },
    // Strings and regex
    { tag: [tags.processingInstruction, tags.inserted], color: base0A },
    { tag: [/*@__PURE__*/tags.special(tags.string), tags.regexp], color: base0A },
    // Punctuation and structure
    { tag: /*@__PURE__*/tags.definition(tags.typeName), color: base0B, fontWeight: 'bold' },
    { tag: [tags.operator, tags.operatorKeyword], color: '#78b6ff' },
    { tag: [tags.bracket], color: '#8da0bf' },
    { tag: [tags.brace], color: '#8da0bf' },
    { tag: [tags.punctuation], color: '#8da0bf' },
    // Comments and documentation
    { tag: tags.meta, color: base09 },
    { tag: tags.comment, fontStyle: 'italic', color: base09 },
    { tag: tags.docComment, fontStyle: 'italic', color: base09 },
    // HTML/XML elements
    { tag: [tags.tagName], color: base0F },
    { tag: [tags.attributeName], color: '#ffd580' },
    // Markdown and text formatting
    { tag: [tags.heading], fontWeight: 'bold', color: base0E },
    { tag: [tags.strong], fontWeight: 'bold' },
    { tag: [tags.emphasis], fontStyle: 'italic' },
    // Links and URLs
    { tag: [tags.link], color: base10, fontWeight: '500' },
    {
        tag: [tags.url],
        color: base11,
        textDecoration: 'underline',
        textUnderlineOffset: '2px',
    },
    // Special states
    { tag: [tags.invalid], color: invalid, textDecoration: 'underline wavy' },
    { tag: [tags.strikethrough], color: invalid, textDecoration: 'line-through' },
    // Enhanced syntax highlighting
    { tag: /*@__PURE__*/tags.constant(tags.name), color: base0C },
    { tag: tags.controlKeyword, color: base07, fontWeight: 'bold' },
    { tag: tags.deleted, color: base08 },
    { tag: tags.labelName, color: base0B },
    { tag: tags.string, color: base0A },
]);
/**
 * Combined Abyss theme extension
 */
const abyss = [
    abyssTheme,
    /*@__PURE__*/syntaxHighlighting(abyssHighlightStyle),
];
/**
 * Abyss merge revert styles configuration
 */
const abyssMergeStyles = {
    backgroundColor: darkBackground,
    borderColor: '#084671',
    buttonColor: base01,
    buttonHoverColor: '#0a3555',
};

export { abyss, abyssMergeStyles, applyMergeRevertStyles };
